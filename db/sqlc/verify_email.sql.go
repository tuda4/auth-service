// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: verify_email.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createVerifyEmail = `-- name: CreateVerifyEmail :one
INSERT INTO verify_emails (
    account_id,
    secret_code,
    is_used
) VALUES (
    $1,
    $2,
    $3
    )
RETURNING id, account_id, secret_code, is_used, created_at, expired_at
`

type CreateVerifyEmailParams struct {
	AccountID  uuid.UUID `json:"account_id"`
	SecretCode string    `json:"secret_code"`
	IsUsed     bool      `json:"is_used"`
}

func (q *Queries) CreateVerifyEmail(ctx context.Context, arg CreateVerifyEmailParams) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, createVerifyEmail, arg.AccountID, arg.SecretCode, arg.IsUsed)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getVerifyEmailBySecretCode = `-- name: GetVerifyEmailBySecretCode :one
SELECT id, account_id, secret_code, is_used, created_at, expired_at FROM verify_emails WHERE account_id = $1 AND secret_code = $2 AND is_used = false AND expired_at > now() LIMIT 1
`

type GetVerifyEmailBySecretCodeParams struct {
	AccountID  uuid.UUID `json:"account_id"`
	SecretCode string    `json:"secret_code"`
}

func (q *Queries) GetVerifyEmailBySecretCode(ctx context.Context, arg GetVerifyEmailBySecretCodeParams) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, getVerifyEmailBySecretCode, arg.AccountID, arg.SecretCode)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const updateVerifyEmail = `-- name: UpdateVerifyEmail :exec
UPDATE verify_emails SET is_used = true WHERE account_id = $1 AND secret_code = $2 AND is_used = false AND expired_at > now()
`

type UpdateVerifyEmailParams struct {
	AccountID  uuid.UUID `json:"account_id"`
	SecretCode string    `json:"secret_code"`
}

func (q *Queries) UpdateVerifyEmail(ctx context.Context, arg UpdateVerifyEmailParams) error {
	_, err := q.db.Exec(ctx, updateVerifyEmail, arg.AccountID, arg.SecretCode)
	return err
}
