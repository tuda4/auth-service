// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: account.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const changePassword = `-- name: ChangePassword :exec
UPDATE accounts
SET hash_password = $2, updated_at = 'now()'
WHERE account_id = $1 AND deleted_at IS NULL
`

type ChangePasswordParams struct {
	AccountID    uuid.UUID `json:"account_id"`
	HashPassword string    `json:"hash_password"`
}

func (q *Queries) ChangePassword(ctx context.Context, arg ChangePasswordParams) error {
	_, err := q.db.Exec(ctx, changePassword, arg.AccountID, arg.HashPassword)
	return err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (account_id, email, hash_password)
VALUES ($1, $2, $3)
RETURNING id, account_id, email, hash_password, created_at, updated_at, deleted_at, is_email_verified
`

type CreateAccountParams struct {
	AccountID    uuid.UUID `json:"account_id"`
	Email        string    `json:"email"`
	HashPassword string    `json:"hash_password"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.AccountID, arg.Email, arg.HashPassword)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Email,
		&i.HashPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
UPDATE accounts
SET deleted_at = 'now()'
WHERE account_id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, accountID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAccount, accountID)
	return err
}

const getAccountByEmail = `-- name: GetAccountByEmail :one
SELECT id, account_id, email, hash_password, created_at, updated_at, deleted_at, is_email_verified
FROM accounts
WHERE email = $1 AND deleted_at IS NULL AND is_email_verified = TRUE
LIMIT 1
`

func (q *Queries) GetAccountByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Email,
		&i.HashPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const getProfileAccount = `-- name: GetProfileAccount :one
SELECT
    a.account_id,
    a.email,
    p.first_name,
    p.last_name,
    p.phone_number,
    p.birthday,
    p.address
FROM accounts as a
LEFT JOIN profiles as p ON p.account_id = a.account_id
WHERE a.email = $1 AND a.deleted_at IS NULL
LIMIT 1
`

type GetProfileAccountRow struct {
	AccountID   uuid.UUID          `json:"account_id"`
	Email       string             `json:"email"`
	FirstName   pgtype.Text        `json:"first_name"`
	LastName    pgtype.Text        `json:"last_name"`
	PhoneNumber pgtype.Text        `json:"phone_number"`
	Birthday    pgtype.Timestamptz `json:"birthday"`
	Address     pgtype.Text        `json:"address"`
}

func (q *Queries) GetProfileAccount(ctx context.Context, email string) (GetProfileAccountRow, error) {
	row := q.db.QueryRow(ctx, getProfileAccount, email)
	var i GetProfileAccountRow
	err := row.Scan(
		&i.AccountID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Birthday,
		&i.Address,
	)
	return i, err
}

const updateAccountEmail = `-- name: UpdateAccountEmail :exec
UPDATE accounts
SET is_email_verified = true, updated_at = 'now()'
WHERE account_id = $1 AND deleted_at IS NULL
`

func (q *Queries) UpdateAccountEmail(ctx context.Context, accountID uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateAccountEmail, accountID)
	return err
}
