// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: device.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices (account_id, device_id, exp_token_device)
VALUES ($1, $2, $3)
RETURNING id, device_id, account_id, exp_token_device, created_at, deleted_at
`

type CreateDeviceParams struct {
	AccountID      uuid.UUID `json:"account_id"`
	DeviceID       string    `json:"device_id"`
	ExpTokenDevice time.Time `json:"exp_token_device"`
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, createDevice, arg.AccountID, arg.DeviceID, arg.ExpTokenDevice)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.AccountID,
		&i.ExpTokenDevice,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAllDevices = `-- name: GetAllDevices :many
SELECT id, device_id, account_id, exp_token_device, created_at, deleted_at
FROM devices
WHERE account_id = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) GetAllDevices(ctx context.Context, accountID uuid.UUID) ([]Device, error) {
	rows, err := q.db.Query(ctx, getAllDevices, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Device{}
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.AccountID,
			&i.ExpTokenDevice,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneDevice = `-- name: GetOneDevice :one
SELECT id, device_id, account_id, exp_token_device, created_at, deleted_at
FROM devices
WHERE account_id = $1 AND device_id = $2 AND deleted_at IS NULL
LIMIT 1
`

type GetOneDeviceParams struct {
	AccountID uuid.UUID `json:"account_id"`
	DeviceID  string    `json:"device_id"`
}

func (q *Queries) GetOneDevice(ctx context.Context, arg GetOneDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, getOneDevice, arg.AccountID, arg.DeviceID)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.AccountID,
		&i.ExpTokenDevice,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
