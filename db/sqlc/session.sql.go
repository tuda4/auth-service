// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: session.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (account_id, refresh_token, user_agent, client_id, is_blocked, expired_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, account_id, refresh_token, user_agent, client_id, is_blocked, expired_at, created_at
`

type CreateSessionParams struct {
	AccountID    uuid.UUID `json:"account_id"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientID     string    `json:"client_id"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiredAt    time.Time `json:"expired_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.AccountID,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientID,
		arg.IsBlocked,
		arg.ExpiredAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientID,
		&i.IsBlocked,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const getOneSession = `-- name: GetOneSession :one
SELECT id, account_id, refresh_token, user_agent, client_id, is_blocked, expired_at, created_at
FROM sessions
WHERE refresh_token = $1 AND expired_at > 'now()'
LIMIT 1
`

func (q *Queries) GetOneSession(ctx context.Context, refreshToken string) (Session, error) {
	row := q.db.QueryRow(ctx, getOneSession, refreshToken)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientID,
		&i.IsBlocked,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}
