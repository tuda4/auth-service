// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: profile.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (account_id, phone_number, birthday, first_name, last_name, address)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, account_id, phone_number, address, birthday, first_name, last_name, created_at, updated_at, deleted_at
`

type CreateProfileParams struct {
	AccountID   uuid.UUID   `json:"account_id"`
	PhoneNumber string      `json:"phone_number"`
	Birthday    time.Time   `json:"birthday"`
	FirstName   string      `json:"first_name"`
	LastName    string      `json:"last_name"`
	Address     pgtype.Text `json:"address"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, createProfile,
		arg.AccountID,
		arg.PhoneNumber,
		arg.Birthday,
		arg.FirstName,
		arg.LastName,
		arg.Address,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.PhoneNumber,
		&i.Address,
		&i.Birthday,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteProfile = `-- name: DeleteProfile :exec
UPDATE profiles
SET deleted_at = 'now()'
WHERE account_id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteProfile(ctx context.Context, accountID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProfile, accountID)
	return err
}

const getOneProfile = `-- name: GetOneProfile :one
SELECT id, account_id, phone_number, address, birthday, first_name, last_name, created_at, updated_at, deleted_at
FROM profiles
WHERE account_id = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetOneProfile(ctx context.Context, accountID uuid.UUID) (Profile, error) {
	row := q.db.QueryRow(ctx, getOneProfile, accountID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.PhoneNumber,
		&i.Address,
		&i.Birthday,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE profiles
SET phone_number = $2,
    birthday = $3,
    first_name = $4,
    last_name = $5,
    address = COALESCE($6, address),
    updated_at = 'now()'
WHERE account_id = $1 AND deleted_at IS NULL
RETURNING id, account_id, phone_number, address, birthday, first_name, last_name, created_at, updated_at, deleted_at
`

type UpdateProfileParams struct {
	AccountID   uuid.UUID   `json:"account_id"`
	PhoneNumber string      `json:"phone_number"`
	Birthday    time.Time   `json:"birthday"`
	FirstName   string      `json:"first_name"`
	LastName    string      `json:"last_name"`
	Address     pgtype.Text `json:"address"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, updateProfile,
		arg.AccountID,
		arg.PhoneNumber,
		arg.Birthday,
		arg.FirstName,
		arg.LastName,
		arg.Address,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.PhoneNumber,
		&i.Address,
		&i.Birthday,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
